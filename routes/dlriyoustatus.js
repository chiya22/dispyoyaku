const log4js = require("log4js");
const logger = log4js.configure('./config/log4js-config.json').getLogger();
const express = require('express');
// ExcelJS, puppeteer, iconv-lite, fs are now managed by reportService
const common = require("../util/common"); // Keep if getYoubi or other common utils are used directly here
const reportService = require('../services/reportService'); // Import the new service
// reportUtils are used within reportService or directly if needed.
// const reportUtils = require('../util/reportUtils'); // Only if utils are directly called in this file

const router = express.Router();
// dlpath should ideally be managed within reportService or passed as a config
// For now, if reportService.downloadReservationData handles paths correctly, this might not be needed here.
// const dlpath = 'C:\\download\\dispyoyakuriyoustatus'; 

router.get('/', (req,res) => {

  const date = new Date();
  let tmp = '';
  tmp = '' + date.getFullYear();
  tmp += '' + ('0' + (date.getMonth() + 1)).slice(-2);
  tmp += '' + ('0' + date.getDate()).slice(-2);
  
  res.render('dlriyoustatus', {
    target_yyyymmdd: tmp
  });
})  

/**
 * 指定された日付の予約情報をもとに利用状況表エクセルを作成しダウンロードさせる
 */
router.post('/', async (req, res) => { // Added async here
  const target_yyyymmdd = req.body.target_yyyymmdd.replace(/-/g, ''); // Ensure target_yyyymmdd is clean
  logger.info(`dlriyoustatus route: Processing request for ${target_yyyymmdd}`);

  let downloadedFilePath = ''; // To store the path of the downloaded CSV

  try {
    // Step 1: Download reservation data using the service
    logger.info(`Calling reportService.downloadReservationData for ${target_yyyymmdd}`);
    // IMPORTANT: The original code uses a specific puppeteer flow for a site at process.env.YOYAKU_URL
    // The current reportService.downloadReservationData is based on CALENDAR_LOGIN_URL.
    // This needs to be reconciled. For now, I'll assume reportService is correctly implemented
    // for the *actual* target system, or it will be adapted.
    downloadedFilePath = await reportService.downloadReservationData(target_yyyymmdd);
    logger.info(`File downloaded to: ${downloadedFilePath}`);

    // Step 2: Generate Excel report using the service
    // The original code has specific logic for populating the Excel sheet (main)
    // and uses helper functions (getRowNumByRoomname, r1c1ToA1, rowMergeProc) which are now in reportUtils.js.
    // reportService.generateReportExcel should now incorporate this logic.
    logger.info(`Calling reportService.generateReportExcel for ${target_yyyymmdd} with file ${downloadedFilePath}`);
    const workbook = await reportService.generateReportExcel(downloadedFilePath, target_yyyymmdd);
    logger.info("Excel report workbook generated by service.");

    // Step 3: Send the generated Excel file to the client
    const outputFileName = `riyoustatus_${target_yyyymmdd}.xlsx`;
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename=${outputFileName}`);

    await workbook.xlsx.write(res);
    logger.info(`Excel file ${outputFileName} sent to client.`);
    // res.end() is called automatically by workbook.xlsx.write(res) when it's a stream response.

  } catch (error) {
    logger.error('Error in /dlriyoustatus POST route:', error);
    res.status(500).send(`An error occurred during report generation: ${error.message}`);
  } finally {
    // Clean up the downloaded CSV file
    if (downloadedFilePath) {
      try {
        // Ensure fs.promises is used if you haven't explicitly required and assigned fs.promises.unlink
        const fs = require('fs').promises; // Make sure to require fs.promises
        await fs.unlink(downloadedFilePath);
        logger.info(`Cleaned up downloaded file: ${downloadedFilePath}`);
      } catch (unlinkError) {
        logger.error(`Error deleting downloaded file ${downloadedFilePath}:`, unlinkError);
      }
    }
  }
});

module.exports = router;
